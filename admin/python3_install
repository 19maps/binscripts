#!/bin/bash

#####################################################################
# python3_install
#
# install latest python3 
#
# Date: 2020.04.14
#
#####################################################################



declare __DEVELOPMENTSOFTWARE=$(tr -s [:space:] '&' <<EOF
    build-essential
    checkinstall
    git
    libbz2-dev 
    libc6-dev 
    libffi-dev
    libgdbm-dev
    libncurses5-dev
    libncursesw5-dev
    libnss3-dev
    libreadline-gplv2-dev 
    libsqlite3-dev 
    libssl-dev
    nodejs
    npm
    python3-dev
    python3-pip
    python3-venv
    tk-dev 
    zlib1g-dev
EOF
)


$declare _PYTHONURL="https://www.python.org/ftp/python/3.8.1/Python-3.8.1.tar.xz"
declare _PYTHONURL="https://www.python.org/ftp/python/3.8.2/Python-3.8.2.tar.xz"

declare __notifylevel=2

function notify () {
    # centralized function to notify/echo messages currently sent for STDERR on 2
    # _level is arbitrary - but generally:
    #       0 - run error, program will exit
    #       1 - general info
    #       2 - more detail, debugging info
    declare _level=$1
    declare _msg=${@:2}

    if [[ "$__notifylevel" -ge "$_level" ]]; then
        cat <<< "$_msg" 1>&2
    fi
}


function print_help() {
    echo "Usage: $0 [-s | -p] "
    echo "  where p: instal python, s: update system, no arguement: both actions"
}


function check_url () {
    declare _url=$1
    declare _status

    if [[ $(wget --spider $_url 2>&1 | grep "broken") ]]; then 
        _status="broken"
    else
        _status=0
    fi

    notify 2 "check_url: $_status"
    echo $_status
}


function get_osversion () {
    declare _osversion=$(lsb_release -a 2>/dev/null \
        | grep -i "codename" \
        | cut -f 2)
    echo $_osversion
}


function update_system () {
    notify 1 "update_system"

    sudo apt-get -y update
    sudo apt-get -y upgrade
    sudo apt-get -y dist-upgrade
    sudo apt-get -y clean
    sudo apt-get -y remove
    sudo apt-get -y autoremove
}


function install_software () {
    declare _software=$1
    # software list delineated by '&'
    declare _softwarelist=$(echo $_software | tr '&' ' ')

    notify 1 "install_software: software:$_software"

    sudo apt-get -y install $_softwarelist
}


function install_python3 () {
    declare __pyarc=$(basename $_PYTHONURL)
    declare __pydir="/tmp/$(basename -s .tar.xz $_PYTHONURL)"
    declare __pyasc
    declare __pyascurl
    declare __dummy
    declare __filemd5
    declare __pymd5

    notify 1 "Installing python from $_PYTHONURL"
    if [[ $(check_url $_PYTHONURL) -ne 0 ]]; then
        notify 0 "ERROR: unable to access geoserver url: $_PYTHONURL"
        exit 1
    fi

    wget -c -P /tmp $_PYTHONURL

    # check integrity/security
    # imported signing key with:
    #    wget -O - https://keybase.io/ambv/pgp_keys.asc | gpg --import
    echo 
    read -p "Enter signature/asc URL for Python archive: " __pyascurl
    wget -c -P /tmp $__pyascurl
    __pyasc="/tmp/$(basename $__pyascurl)"
    gpg --verify $__pyasc "/tmp/$__pyarc"
    read -p "Continue? " __dummy
    echo
    read -p "Enter md5 signature for Python archive: " __pymd5
    md5sum "/tmp/$__pyarc"
    __filemd5=$(md5sum "/tmp/$__pyarc" | cut -d' ' -f 1)
    if [[ "$__filemd5" == "$__pymd5" ]]; then 
        echo "MD5 matches"
    else
        echo "MD5 does not match"
    fi
    read -p "Continue? " __dummy

    tar -xvJf "/tmp/$__pyarc" -C /tmp
    cd $__pydir && ./configure --enable-optimizations
    make -j 8 -C $__pydir

    notify 1 ""
    notify 1 "installing Python" 
    sudo make -C $__pydir altinstall 
}



getopts "sp" OPTION
case $OPTION in
    s)  # update system
        update_system
        install_software $__DEVELOPMENTSOFTWARE
        ;;
    p)  # install python3
        install_python3 
        ;;
    *)
        print_help
        exit 1
        ;;
esac


