#!/bin/bash

# qube_mgmt
#
# automate the creation and updating of qubes
#
# Date: 2019.10.10
# Author: Andrew Ross
#


declare _MASTERTEMPLATE=debian-10
declare _SYSTEMTEMPLATE=fedora-28-30
declare _CONFIGDIR="$(dirname $0)/config/"

declare __notifylevel="${__notifylevel:-2}"
declare __qvm_run_options="${__qvm_run_options:-"-p --color-stderr=37"}"

source $(dirname "$0")/qubes_functions


#function print_help() {
#    echo "Usage: vm_mgmt (-c | -u | -d) -v (VMNAME|all)"
#    echo "  where VNAME in usb,plus,media,dev,vault,printer"
#    exit 1
#}
#
#

#function check_vm () {
#    # check if vm exists - delete or exit
#    declare _vmname=$1
#    notify 2 "--check_vm: vmname:$_vmname"
#    
#    qvm-check $_vmname
#    if [ "$?" -eq 0 ]; then
#        read -p "  delete (n/Y)?" R
#        if [ "$R" == "Y" ]; then 
#            qvm-remove $_vmname
#            if [ "$?" -ne 0 ]; then exit 1; fi
#        else
#            echo "Exiting..."
#            exit 1
#        fi
#    fi
#}



function create_template () {
    declare _template=$1
    declare _software=$2
    notify 1 "--create_template : _template:$_template, _software:$_software"

    qvm-clone $_MASTERTEMPLATE $_template
    qube_update_vm $_template
    qube_install_software $_template $_software
    qvm-sync-appmenus $_template
    qvm-shutdown $_template
}



function config_user () {
    declare _appvm=$1
    declare _commands

    notify 2 "--config_user _appvm:$_appvm"

    # nautilus config
    _commands=$(cat <<EOF
        dconf write /org/gnome/nautilus/list-view/defualt-zoom-level "'small'"
        dconf write /org/gnome/nautilus/list-view/use-tree-view true
        dconf write /org/gnome/nautilus/preferences/default-folder-viewer "'list-view'"
        dconf write /org/gtk/settings/file-chooser/expand-folders true
        dconf write /org/gtk/settings/file-chooser/sort-directories-first true
EOF
    )
    qube_run_commands $_appvm "user" $_commands

    declare _lines=$(cat dotfiles/__bashrc)
    qube_append_file \
        $_appvm \
        "user" \
        "/home/user/.bashrc" \
        $_lines
    qube_copy_file \
        $_appvm \
        "user" \
        "dotfiles/_vimrc" \
        "/home/user/.vimrc"
    qube_copy_file \
        $_appvm \
        "user" \
        "dotfiles/_screenrc" \
        "/home/user/.screenrc"

    qube_remove_incomming
}


function config_firefox_addons () {
    declare _appvm=$1
    declare _commands

    notify 2 "--config_firefox_addons  _appvm:$_appvm"

    _commands=$(cat <<EOF
        firefox 
            https://addons.mozilla.org/en-US/firefox/addon/noscript/ 
            https://addons.mozilla.org/en-US/firefox/addon/adblock-plus/ 
EOF
    )
    _commands=$(echo $_commands | tr '[:space:]' ' ')
    qube_run_commands $_appvm "user" $_commands
}



function config_firefox () {
    declare _appvm=$1
    declare _commands

    notify 2 "--config_firefox  _appvm:$_appvm"

    for _f in ls config/configFirefox/; do
        qvm-copy-to-vm $_template $_f
    done

    qvm-run \
        $__qvm_run_options \
        -u "root" \
        $_apppvm \
        "/home/user/QubesIncoming/dom0/configFirefox"

    qube_remove_incomming
}



#function update_template () {
#    local template=$1
#    if [ "$DEBUG" ]; then echo "--update_template: template:$template"; fi
#
#    qvm-run -p -u root $template "apt-get -y update"
#    qvm-run -p -u root $template "apt-get -y upgrade"
#    qvm-run -p -u root $template "apt-get -y dist-upgrade"
#    qvm-run -p -u root $template "apt-get -y clean"
#    qvm-run -p -u root $template "apt-get -y remove"
#    qvm-run -p -u root $template "apt-get -y autoremove"
#}


#function install_software () {
#    local template=$1
#    local software=$2
#    if [ "$DEBUG" ]; then echo "--install_software: template:$template, software:$software"; fi
#
#    softwarelist=$(echo $software | tr '&' ' ')
#
#    qvm-run -p -u root $template "apt-get -y install $softwarelist"
#}


function create_vpn () {
    declare _vpnvm=sys-vpn-ro
    declare _apptemplate=debian-9-plus
    declare _vpnappdvm=vpn-dvm

    notify 2 "--create_vpn: _vpnvm:$_vpnvm, _systemplate:$_SYSTEMPLATE, _apptemplate:$_apptemplate"

    qvm-create --class AppVM \
        --template $_SYSTEMPLATE \
        --label red \
        --prop=maxmem=500 \
        --prop=memory=500 \
        --prop=netvm=sys-net \
        --prop=vcpus=2 \
        --prop=provides_network=True \
        $_vpnvm
    qube_copy_file $_vpnvm \
        "user" \
        "$_CONFIGDIR/vpn.ovpn" \
        "/tmp/vpn.ovpn"
    qube_copy_file $_vpnvm \
        "user" \
        "$_CONFIGDIR/configure_vpn" \
        "/tmp/configure_vpn"
    qvm-run $__qvm_run_options \
        -u root \
        $_vpnvm \
        "bash /tmp/configure_vpn"
    qvm_wait_shutdown $_vpnvm

    notify 2 "--create_vpn: _vpnappdvm:$_vpnappdvm"

    qvm-create --class AppVM \
        --template $_apptemplate \
        --label red \
        --prop=maxmem=2048 \
        --prop=memory=1024 \
        --prop=netvm=$_vpnvm \
        $_vpnappdvm
    qvm-prefs $_vpnappdvm template_for_dispvms True
    qvm-features $_vpnappdvm appmenus-dispvm 1
    qvm-start $_vpnappdvm

    qube_copy_file $_vpnappdvm \
        "user" \ 
        "$_CONFIGDIR/configure_vpn_client" \
        "/tmp/configure_vpn_client"

    notify 0 "  configuring appvm $_vpnappdvm: install firefox addons, set/fix firefox homepage, set cache"
    qvm-run $__qvm_run_options \
        -u root \
        $_vpnappdvm \
        "bash /tmp/configure_vpn_client"
    qvm-shutdown $_vpnappdvm 
}


function create_min_appvms () {
    declare _template=$1
    declare _appvm

    _appvm=fin
    notify 2 "--create_min_appvms _template:$_template, _appvm:$_appvm"
    
    qvm-create --class AppVM \
        --template $_template \
        --label purple \
        --prop=maxmem=1024 \
        --prop=memory=512 \
        --prop=netvm="" \
        $_appvm
    qvm-volume extend $_appvm:private 9216mb
    config_user $_appvm
    qvm-shutdown $_appvm

    _appvm=files
    notify 2 "--create_min_appvms _template:$_template, _appvm:$_appvm"
    
    qvm-create --class AppVM \
        --template $_template \
        --label purple \
        --prop=maxmem=1024 \
        --prop=memory=512 \
        --prop=netvm="" \
        $_appvm
    qvm-volume extend $_appvm:private 50000mb
    config_user $_appvm
    qvm-shutdown $_appvm
}


function create_dev_appvms() {
    declare _template=$1
    declare _appvm

    _appvm=dev
    notify 2 "--create_dev_appvms _template:$_template, _appvm:$_appvm"

    qvm-create --class AppVM \
        --template $_template \
        --label yellow \
        --prop=maxmem=8192 \
        --prop=memory=1024 \
        $_appvm
    qvm-volume extend $appvm:private 10240mb

    qvm-start $_appvm
    config_user $_appvm
    qvm-shutdown $_appvm 

    _appvm=learn
    notify 2 "--create_dev_appvms _template:$_template, _appvm:$_appvm"

    qvm-create --class AppVM \
        --template $_template \
        --label yellow \
        --prop=maxmem=8192 \
        --prop=memory=1024 \
        $_appvm

    qvm-start $_appvm
    config_user $_appvm
    qvm-shutdown $_appvm 
}


function create_media_appvms() {
    declare _template=$1
    declare _appvm

    # create media dvm
    _appvm=media-dvm
    notify 2 "--create_media__appvms _template:$_template, APPVM:$APPVM"

    qvm-create --class AppVM \
        --template $_template \
        --label red \
        --prop=maxmem=8192 \
        --prop=memory=1024 \
        $_appvm
    qvm-prefs $_appvm template_for_dispvms True
    qvm-features $_appvm appmenus-dispvm 1
    qvm-volume extend $_appvm:private 8192mb

    qvm-start $_appvm
    config_user $_appvm
    qvm-shutdown $_appvm 

    # create media
    declare _appvm=media
    check_vm $_appvm

    qvm-create --class AppVM \
        --template $_template \
        --label green \
        --prop=maxmem=8192 \
        --prop=memory=1024 \
        $_appvm
    qvm-volume extend $_appvm:private 8192mb

    qvm-start $_appvm
    config_user $_appvm
    qvm-shutdown $_appvm 
}


function install_printer_soft () {
    local TEMPLATE=$1
    local brotherinst=linux-brprinter-installer-2.2.1-1

    notify 1 "--install_printer_soft TEMPLATE:$TEMPLATE"
    sleep 5 # wait for install to complete

    qvm-shutdown $TEMPLATE
    qvm-prefs $TEMPLATE netvm sys-firewall
    qvm-start $TEMPLATE

    echo "qvm-copy-to-vm $TEMPLATE $_CONFIGDIR/$brotherinst.gz"
    qvm-copy-to-vm $TEMPLATE $_CONFIGDIR/$brotherinst.gz
    echo "--Install printer soft: model number MFCL2710DW"
    qvm-run -p $TEMPLATE "gunzip /home/user/QubesIncoming/dom0/$brotherinst.gz"
    qvm-run -p -u root $TEMPLATE "bash /home/user/QubesIncoming/dom0/$brotherinst"
    qvm-run -p $TEMPLATE "rm -rf /home/user/QubesIncoming"
    qvm-run -p $TEMPLATE "rm -f /home/user/*.deb"
    qvm-run -p $TEMPLATE "rm -f /home/user/uninstaller*"

    qvm-shutdown $TEMPLATE 
    qvm-prefs $TEMPLATE netvm ''
}


function create_printer_appvms() {
    local TEMPLATE=$1

    # create printer dvm
    local appvm=printer-dvm
    check_vm $appvm

    qvm-create --class AppVM --template $TEMPLATE --label red --prop=maxmem=2048 --prop=memory=400 $appvm
    qvm-prefs $appvm template_for_dispvms True
    qvm-features $appvm appmenus-dispvm 1

    qvm-start $appvm
    qvm-copy-to-vm $appvm $_CONFIGDIR/scanBro
    qvm-run -p -u root $appvm "cp /home/user/QubesIncoming/dom0/scanBro /usr/local/bin/"
    qvm-run -p -u root $appvm "chmod +x /usr/local/bin/scanBro"
    qvm-copy-to-vm $appvm $_CONFIGDIR/printBro
    qvm-run -p -u root $appvm "cp /home/user/QubesIncoming/dom0/printBro /usr/local/bin/"
    qvm-run -p -u root $appvm "chmod +x /usr/local/bin/printBro"
    qvm-copy-to-vm $appvm $_CONFIGDIR/combine_doublesided
    qvm-run -p -u root $appvm "cp /home/user/QubesIncoming/dom0/combine_doublesided /usr/local/bin/"
    qvm-run -p -u root $appvm "chmod +x /usr/local/bin/combine_doublesided"
    qvm-copy-to-vm $appvm $_CONFIGDIR/img2pdf
    qvm-run -p -u root $appvm "cp /home/user/QubesIncoming/dom0/img2pdf /usr/local/bin/"
    qvm-run -p -u root $appvm "chmod +x /usr/local/bin/img2pdf"

    qvm-run -p $appvm  "rm -rf /home/user/QubesIncoming"
    qvm-shutdown $appvm
}


function create_plus_appvms() {
    local TEMPLATE=$1

    # create plus-dvm
    local appvm=plus-dvm
    check_vm $appvm

    qvm-create --class AppVM \
        --template $TEMPLATE \
        --label red \
        --prop=maxmem=4096 \
        --prop=memory=1024 \
        $appvm
    qvm-prefs $appvm template_for_dispvms True
    qvm-features $appvm appmenus-dispvm 1
    qvm-volume extend $appvm:private 20480mb

    # create work
    local appvm=work
    check_vm $appvm

    qvm-create --class AppVM \
        --template $TEMPLATE \
        --label green \
        --prop=maxmem=8192 \
        --prop=memory=1024 \
        --prop=netvm="" \
        $appvm
    qvm-volume extend $appvm:private 20480mb
    
    # create epub
    local appvm=epub
    check_vm $appvm

    qvm-create --class AppVM \
        --template $TEMPLATE \
        --label green \
        --prop=maxmem=8192 \
        --prop=memory=1024 \
        --prop=netvm="" \
        $appvm
    qvm-volume extend $appvm:private 50000mb
}


function create_gpg () {
    local _systemplate=fedora-30
    local APPNAME=gpg
    qvm-create --class AppVM \
        --template $_systemplate \
        --label orange \
        --prop=maxmem=4000 \
        --prop=memory=400 \
        --prop=netvm="" \
        $APPNAME
    qvm-start $APPNAME
    qvm-run -p -u root $APPNAME "sudo apt-get install qubes-gpg-split"


}


function make_win_vm () {
    WINVMNAME=win7
    WINCD=/home/user/iso/win7.iso
    # https://www.qubes-os.org/doc/windows-vm/#qubes-40---windows-vm-installation

    qvm-create --class StandaloneVM \
        --label red \
        --property virt_mode=hvm \
        $WINVMNAME
    qvm-prefs $WINVMNAME memory 8192
    qvm-prefs $WINVMNAME maxmem 8192
    qvm-prefs $WINVMNAME kernel ''
    qvm-volume extend $WINVMNAME:root 25g
    qvm-prefs $WINVMNAME debug true
    qvm-features $WINVMNAME video-model cirrus

    qvm-start --cdrom=personal:$WINCD $WINVMNAME

    echo "make_win_vm: Windows VM started... waiting"
    read X

    qvm-clone $WINVMNAME win7-backinstalled

    qvm-features --unset $WINVMNAME video-model
    qvm-prefs $WINVMNAME qrexec_timeout 300

    #Install qubes tools:
    sudo qubes-dom0-update qubes-windows-tools
    qvm-start $WINVMNAME --install-windows-tools

    echo "make_win_vm: Windows VM installing qubes tools... waiting"
    read X

    qvm-prefs -s $WINVMNAME debug false
}



function main () {
    # make templates

    TEMPLATE=${VM_TEMPLATE_NAMES[min]}
    SOFTWARE=${VM_SOFT[min]}
    create_template $TEMPLATE $SOFTWARE
    create_min_appvms ${VM_TEMPLATE_NAMES[min]}

    # make apps
    # make dvms
}


declare -A VM_SOFT
declare -A VM_TEMPLATE_NAMES
declare -A VM_CONFIG

VM_TEMPLATE_NAMES=(
    [master]=$_MASTERTEMPLATE
    [system]=$_SYSTEMTEMPLATE
    [dev]=$_MASTERTEMPLATE-dev
    [media]=$_MASTERTEMPLATE-media
    [min]=$_MASTERTEMPLATE-min
    [plus]=$_MASTERTEMPLATE-plus
    [printer]=$_MASTERTEMPLATE-printer
    [usb]=$_SYSTEMTEMPLATE-usb
    [zoom]=$_MASTERTEMPLATE-zoom
    )

VM_CONFIG=( # "type;template;lable;maxmem;memory;name;storage;vCPUs;network;dvm"
    [dev]="AppVM;${VM_TEMPLATE_NAMES[dev]};yellow;4000;400;dev;10240;2;default;0"
    [files]="AppVM;${VM_TEMPLATE_NAMES[min]};blue;800;400;files;152576;1;;0"
    [fin]="AppVM;${VM_TEMPLATE_NAMES[min]};purple;1024;400;fin;9216;1;;0"
    [gpg]="AppVM;${VM_TEMPLATE_NAMES[min]};purple;800;400;gpg;2048;1;;0"
    [media]="AppVM;${VM_TEMPLATE_NAMES[media]};green;8192;1024;media;30720;2;default;0"
    [media-dvm]="AppVM;${VM_TEMPLATE_NAMES[media]};red;8192;820;media-dvm;8192;2;default;1"
    [epub]="AppVM;${VM_TEMPLATE_NAMES[plus]};green;2000;500;epub;50176;1;default;0"
    [plus-dvm]="AppVM;${VM_TEMPLATE_NAMES[plus]};red;4096;400;plus-dvm;5120;2;default;1"
    [printer-dvm]="AppVM;${VM_TEMPLATE_NAMES[printer]};red;974;350;printer-dvm;2048;1;default;1"
    [zoom]="AppVM;${VM_TEMPLATE_NAMES[zoom]};red;4000;400;zoom;2048;3;default;1"
    [usb]="AppVM;${VM_TEMPLATE_NAMES[zoom]};red;4000;2000;usb;22528;3;default;0"
    [vpn-dvm]="AppVM;${VM_TEMPLATE_NAMES[plus]};red;4000;400;vpn-dvm;9216;2;sys-vpn-ro;1"
    [vpn-dvm-big]="AppVM;${VM_TEMPLATE_NAMES[plus]};red;4000;400;vpn-dvm-big;28672;2;sys-vpn-ro;1"
    [sys-vpn-ro]="AppVM;${VM_TEMPLATE_NAMES[system]};red;500;400;sys-vpn-ro;2048;1;sys-net;0"
    [work]="AppVM;${VM_TEMPLATE_NAMES[plus]};green;4000;400;work;20480;1;default;0"
    [fedora-dvm]="AppVM;${VM_TEMPLATE_NAMES[system]};red;2000;600;fedora-dvm;2048;2;default;1"
    )

VM_SOFT=( 
    [plus]=$(tr -s [:space:] '&' <<EOF
        audacity
        calibre
        chromium
        deluge
        eog
        gimp
        git
        gnucash
        inkscape
        jmtpfs
        lame
        libdbd-sqlite3
        libreoffice
        nautilus
        pdftk
        python3-pip
        s3cmd
        screen
        tmux
        remmina
        vlc
        xournal
        xsane
EOF
    )
    [media]=$(tr -s [:space:] '&' <<EOF
        chromium
        eog
        kodi
        libavcodec-extra
        nautilus
        vlc
EOF
    )
    [min]=$(tr -s [:space:] '&' <<EOF
        eog
        evince
        gnucash
        gocryptfs
        libdbd-sqlite3
        nautilus
        pdftk
        scrypt
EOF
    )
    [dev]=$(tr -s [:space:] '&' <<EOF
        build-essential
        chromium
        git
        libdbd-sqlite3
        libffi-dev
        libssl-dev
        nautilus
        python3-dev
        python3-pip
        python3-venv
        screen
        sqlite3
        tmux
EOF
    )
    [printer]=$(tr -s [:space:] '&' <<EOF
        eog
        evince
        nautilus
        pdfshuffler
        pdftk
        xsane
EOF
    )
)


# action: create, update, delete
ACTION=''
VM=''
while getopts "cudv:" OPTION; do
    case $OPTION in
        c)
            if [[ $ACTION == '' ]]; then
                ACTION=CREATE
            else
                echo "error - only one action"
                print_help
                exit 1
            fi
            ;;
        u)
            if [[ $ACTION == '' ]]; then
                ACTION=UPDATE
            else
                echo "error - only one action"
                print_help
                exit 1
            fi
            ;;
        d)
            if [[ $ACTION == '' ]]; then
                ACTION=DELETE
            else
                echo "error - only one action"
                print_help
                exit 1
            fi
            ;;
        v)
            if [[ $VM == '' ]]; then
                VM=$OPTARG
            else
                echo "error - only one vm"
                print_help
                exit 1
            fi
            ;;
        *)
            print_help
            exit 1
            ;;
    esac
done

if [ "$ACTION" == "" ] || [ "$VM" == "" ]; then
    echo "error - specify action and vm"
    print_help
    exit 1
fi



if [ "$DEBUG" ]; then echo "--VM:$VM, ACTION:$ACTION"; fi

case $ACTION in
    CREATE)
        case $VM in
            min | vault)
                if [ "$DEBUG" ]; then echo "--creating min/vault"; fi
                TEMPLATE=${VM_TEMPLATE_NAMES[min]}
                SOFTWARE=${VM_SOFT[min]}

                create_template $TEMPLATE $SOFTWARE
                create_min_appvms ${VM_TEMPLATE_NAMES[min]}
                ;;
            media)
                if [ "$DEBUG" ]; then echo "--creating media"; fi
                TEMPLATE=${VM_TEMPLATE_NAMES[media]}
                SOFTWARE=${VM_SOFT[media]}

                create_template $TEMPLATE $SOFTWARE
                create_media_appvms ${VM_TEMPLATE_NAMES[media]}
                ;;
            dev)
                if [ "$DEBUG" ]; then echo "--creating dev"; fi
                TEMPLATE=${VM_TEMPLATE_NAMES[dev]}
                SOFTWARE=${VM_SOFT[dev]}

                create_template $TEMPLATE $SOFTWARE
                create_dev_appvms ${VM_TEMPLATE_NAMES[dev]}
                ;;
            plus)
                if [ "$DEBUG" ]; then echo "--creating plus"; fi
                TEMPLATE=${VM_TEMPLATE_NAMES[plus]}
                SOFTWARE=${VM_SOFT[plus]}
                
                create_template $TEMPLATE $SOFTWARE
                create_plus_appvms $TEMPLATE
                ;;
            printer)
                if [ "$DEBUG" ]; then echo "--creating printer"; fi
                TEMPLATE=${VM_TEMPLATE_NAMES[printer]}
                SOFTWARE=${VM_SOFT[printer]}
                
                create_template $TEMPLATE $SOFTWARE
                install_printer_soft $TEMPLATE 
                create_printer_appvms $TEMPLATE
                ;;
            gpg)
                if [ "$DEBUG" ]; then echo "--creating gpg"; fi
                create_gpg
                ;;
            vpn)
                if [ "$DEBUG" ]; then echo "--creating vpn"; fi
                create_vpn
                ;;
            usb)
                if [ "$DEBUG" ]; then echo "--creating usb"; fi
                sudo qubesctl state.sls qvm.sys-usb
                sudo qubesctl state.sls qvm.usb-keyboard
                qvm-prefs sys-usb autostart False
                echo -e "\n\n##############################\nSYS-USB\nRemove keyboard PCI from qube"
                read R
                ;;
            win)
                make_win_vm
                ;;
            *)
                echo "ERROR: create: unknown vm: $VM"
                exit 1
                ;;
        esac
        ;;
    UPDATE)
        case $VM in
            min | vault)
                if [ "$DEBUG" ]; then echo "--updating min/vault"; fi
                TEMPLATE=${VM_TEMPLATE_NAMES[min]}
                SOFTWARE=${VM_SOFT[min]}
                qvm-start $TEMPLATE
                update_template $TEMPLATE
                install_software $TEMPLATE $SOFTWARE
                qvm-shutdown $TEMPLATE
                ;;
            media)
                if [ "$DEBUG" ]; then echo "--updating media"; fi
                TEMPLATE=${VM_TEMPLATE_NAMES[media]}
                SOFTWARE=${VM_SOFT[media]}
                qvm-start $TEMPLATE
                update_template $TEMPLATE
                install_software $TEMPLATE $SOFTWARE
                qvm-shutdown $TEMPLATE
                ;;
            dev)
                if [ "$DEBUG" ]; then echo "--updating dev"; fi
                TEMPLATE=${VM_TEMPLATE_NAMES[dev]}
                SOFTWARE=${VM_SOFT[dev]}
                qvm-start $TEMPLATE
                update_template $TEMPLATE
                install_software $TEMPLATE $SOFTWARE
                qvm-shutdown $TEMPLATE
                ;;
            plus)
                if [ "$DEBUG" ]; then echo "--updating plus"; fi
                TEMPLATE=${VM_TEMPLATE_NAMES[plus]}
                SOFTWARE=${VM_SOFT[plus]}
                qvm-start $TEMPLATE
                update_template $TEMPLATE
                install_software $TEMPLATE $SOFTWARE
                qvm-shutdown $TEMPLATE
                ;;
            printer)
                if [ "$DEBUG" ]; then echo "--updating printer"; fi
                TEMPLATE=${VM_TEMPLATE_NAMES[printer]}
                SOFTWARE=${VM_SOFT[printer]}
                qvm-start $TEMPLATE
                update_template $TEMPLATE
                install_software $TEMPLATE $SOFTWARE
                qvm-shutdown $TEMPLATE
                ;;
            all)
                if [ "$DEBUG" ]; then echo "--updating all"; fi
                for VM in "${!VM_TEMPLATE_NAMES[@]}"; do
                    TEMPLATE=${VM_TEMPLATE_NAMES[$VM]}
                    SOFTWARE=${VM_SOFT[$VM]}
                    qvm-start $TEMPLATE
                    update_template $TEMPLATE
                    install_software $TEMPLATE $SOFTWARE
                    qvm-shutdown $TEMPLATE
                done
                ;;
            *)
                echo "ERROR: create: unknown vm: $VM"
                exit 1
                ;;
        esac
        ;;
    DELETE)
        ;;
esac
echo "...done"



